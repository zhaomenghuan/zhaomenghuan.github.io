(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{331:function(n,e,t){"use strict";t.r(e);var i=t(1),r=Object(i.a)({},(function(){var n=this,e=n._self._c;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"nodemcu-esp8266-arduino-框架学习"}},[n._v("NodeMCU ESP8266 Arduino 框架学习")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[n._v("前言")]),n._v(" "),e("p",[n._v("在"),e("a",{attrs:{href:"https://zhaomenghuan.js.org/blog/platformio-nodemcu-getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("《基于 PlatformIO 平台玩转 NodeMCU 入门篇》"),e("OutboundLink")],1),n._v(" 一文中我们提到过 PlatformIO 平台 NodeMCU ESP8266 开发板可以基于 "),e("a",{attrs:{href:"https://github.com/espressif/ESP8266_NONOS_SDK",target:"_blank",rel:"noopener noreferrer"}},[n._v("ESP8266 Non-OS SDK"),e("OutboundLink")],1),n._v("、"),e("a",{attrs:{href:"https://github.com/espressif/ESP8266_RTOS_SDK",target:"_blank",rel:"noopener noreferrer"}},[n._v("ESP8266 RTOS SDK"),e("OutboundLink")],1),n._v("、"),e("a",{attrs:{href:"https://github.com/esp8266/Arduino",target:"_blank",rel:"noopener noreferrer"}},[n._v("Arduino"),e("OutboundLink")],1),n._v("、"),e("a",{attrs:{href:"https://github.com/eerimoq/simba",target:"_blank",rel:"noopener noreferrer"}},[n._v("Simba"),e("OutboundLink")],1),n._v(" 四种框架进行开发，ESP8266 Non-OS SDK 和 ESP8266 RTOS SDK 是乐鑫官方提供的开发框架，属于原生框架，底层 API 相对更丰富，一般商业产品基于官方框架开发的更多，但是我们发现 ESP 社区中大量的示例是基于 Arduino 框架开发的，这样因为 Arduino 框架学习曲线比较平缓，支持它的第三方程序库非常多，这也是本文尝试用 Arduino 框架进行实战的原因。")]),n._v(" "),e("h2",{attrs:{id:"arduino-core-for-esp8266"}},[n._v("Arduino core for ESP8266")]),n._v(" "),e("p",[n._v("Arduino core for ESP8266 项目支持开发者使用熟悉的 Arduino 相关的函数、库，直接在 ESP8266 芯片上运行，而不需要额外的 MCU。ESP8266 Arduino core 内置库，可以基于 TCP 或 UDP 进行 WiFi 通信，可以设置 HTTP、mDNS、SSDP 和 DNS 服务器，可以进行 OAT 更新，在 Flash 中使用文件系统，与 SD 卡、Servo、SPI 和 IIC 外设一起工作。")]),n._v(" "),n._m(0),n._v(" "),e("h3",{attrs:{id:"数字-io"}},[n._v("数字 IO")]),n._v(" "),e("p",[n._v("Arduino 中的管脚号直接对应 ESP8266 GPIO 管脚号。Arduino 中有三个操作 IO 的函数：")]),n._v(" "),n._m(1),n._v(" "),n._m(2),e("p",[n._v("digitalRead：\ndigitalWrite：")]),n._v(" "),e("h2",{attrs:{id:"web-server"}},[n._v("Web Server")]),n._v(" "),n._m(3),e("h2",{attrs:{id:"参考"}},[n._v("参考")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://randomnerdtutorials.com/esp8266-web-server/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Build an ESP8266 Web Server – Code and Schematics (NodeMCU)"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"http://www.taichi-maker.com/homepage/iot-development/iot-dev-reference/esp8266-c-plus-plus-reference/",target:"_blank",rel:"noopener noreferrer"}},[n._v("ESP8266-Arduino库 开发参考资料"),e("OutboundLink")],1)])])])}),[function(){var n=this._self._c;return n("ul",[n("li",[this._v("GitHub：https://github.com/esp8266/Arduino")]),this._v(" "),n("li",[this._v("Documentation：https://arduino-esp8266.readthedocs.io/en/latest/")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("pinMode：指定特定端口是作为输入还是输出；")])])},function(){var n=this._self._c;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("void pinMode(uint8_t pin, uint8_t mode);\n")])])])},function(){var n=this._self._c;return n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('#include <ESP8266WiFi.h>\n\nconst char* ssid = "******";\nconst char* password = "******";\n\n// Set web server port number to 80\nWiFiServer server(80);\n\n// Variable to store the HTTP request\nString header;\n\n// Auxiliar variables to store the current output state\nString ledButtonState = "off";\n\n// Current time\nunsigned long currentTime = millis();\n// Previous time\nunsigned long previousTime = 0; \n// Define timeout time in milliseconds (example: 2000ms = 2s)\nconst long timeoutTime = 2000;\n\nvoid setup() {\n  Serial.begin(74880);\n  // Initialize the output variables as outputs\n  pinMode(LED_BUILTIN, OUTPUT);\n  // Set outputs to HIGH\n  digitalWrite(LED_BUILTIN, HIGH);\n\n  // Connect to Wi-Fi network with SSID and password\n  Serial.print("Connecting to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n  // Print local IP address and start web server\n  Serial.println("");\n  Serial.println("WiFi connected.");\n  Serial.println("IP address: ");\n  Serial.println(WiFi.localIP());\n  server.begin();\n}\n\nvoid loop() {\n  WiFiClient client = server.available();   // Listen for incoming clients\n\n  if (client) {                             // If a new client connects,\n    Serial.println("New Client.");          // print a message out in the serial port\n    String currentLine = "";                // make a String to hold incoming data from the client\n    currentTime = millis();\n    previousTime = currentTime;\n    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client\'s connected\n      currentTime = millis();         \n      if (client.available()) {             // if there\'s bytes to read from the client,\n        char c = client.read();             // read a byte, then\n        Serial.write(c);                    // print it out the serial monitor\n        header += c;\n        if (c == \'\\n\') {                    // if the byte is a newline character\n          // if the current line is blank, you got two newline characters in a row.\n          // that\'s the end of the client HTTP request, so send a response:\n          if (currentLine.length() == 0) {\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\n            // and a content-type so the client knows what\'s coming, then a blank line:\n            client.println("HTTP/1.1 200 OK");\n            client.println("Content-type:text/html");\n            client.println("Connection: close");\n            client.println();\n            \n            // turns the GPIOs on and off\n            if (header.indexOf("GET /2/on") >= 0) {\n              Serial.println("GPIO 2 on");\n              ledButtonState = "on";\n              digitalWrite(LED_BUILTIN, LOW);\n            } else if (header.indexOf("GET /2/off") >= 0) {\n              Serial.println("GPIO 2 off");\n              ledButtonState = "off";\n              digitalWrite(LED_BUILTIN, HIGH);\n            }\n            \n            // Display the HTML web page\n            client.println("<!DOCTYPE html><html>");\n            client.println("<head><meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">");\n            client.println("<link rel=\\"icon\\" href=\\"data:,\\">");\n            // CSS to style the on/off buttons \n            // Feel free to change the background-color and font-size attributes to fit your preferences\n            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");\n            client.println(".button { background-color: #195B6A; border: none; color: white; padding: 16px 40px;");\n            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");\n            client.println(".button2 {background-color: #77878A;}</style></head>");\n            \n            // Web Page Heading\n            client.println("<body><h1>ESP8266 Web Server</h1>");\n            \n            // Display current state, and ON/OFF buttons for GPIO2  \n            client.println("<p>GPIO 2 - State " + ledButtonState + "</p>");\n            // If the output5State is off, it displays the ON button       \n            if (ledButtonState=="off") {\n              client.println("<p><a href=\\"/2/on\\"><button class=\\"button\\">ON</button></a></p>");\n            } else {\n              client.println("<p><a href=\\"/2/off\\"><button class=\\"button button2\\">OFF</button></a></p>");\n            } \n\n            client.println("</body></html>");\n            \n            // The HTTP response ends with another blank line\n            client.println();\n            // Break out of the while loop\n            break;\n          } else { // if you got a newline, then clear currentLine\n            currentLine = "";\n          }\n        } else if (c != \'\\r\') {  // if you got anything else but a carriage return character,\n          currentLine += c;      // add it to the end of the currentLine\n        }\n      }\n    }\n    // Clear the header variable\n    header = "";\n    // Close the connection\n    client.stop();\n    Serial.println("Client disconnected.");\n    Serial.println("");\n  }\n}\n')])])])}],!1,null,null,null);e.default=r.exports}}]);