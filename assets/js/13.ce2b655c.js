(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{137:function(t,e,r){t.exports=r.p+"assets/img/docker-framework.13a7534c.jpeg"},138:function(t,e,r){t.exports=r.p+"assets/img/docker-ce-ee.ae8a1bf5.png"},139:function(t,e,r){t.exports=r.p+"assets/img/nginx.7e2d3e7c.png"},140:function(t,e,r){t.exports=r.p+"assets/img/tensors_flowing.4a67e129.gif"},141:function(t,e,r){t.exports=r.p+"assets/img/terminal.27acba14.png"},142:function(t,e,r){t.exports=r.p+"assets/img/jupyter-notebook.1aa0f207.png"},308:function(t,e,r){"use strict";r.r(e);var s=[function(){var t=this,e=t._self._c;return e("ul",[e("li",[t._v("Virtualenv")]),t._v(" "),e("li",[t._v("Pip")]),t._v(" "),e("li",[t._v("Docker")]),t._v(" "),e("li",[t._v("Anaconda")]),t._v(" "),e("li",[t._v("从源代码安装")])])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),this._v(" "),t("li",[this._v("提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。")]),this._v(" "),t("li",[this._v("组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(137),alt:"Docker 总架构图"}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(138),alt:""}})])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\nDocker version "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.03")]),t._v(".0-ce, build 0520e24\n\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" version "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.20")]),t._v(".1, build 5d8c71b\n\n$ docker-machine "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\ndocker-machine version "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.14")]),t._v(".0, build 89b8332\n")])])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("Docker Image(镜像) 是用来创建 docker Container(容器) 的只读模板，其中包含了容器启动所需要的所有配置信息和运行程序，一次构建之后可以多次复用。")])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("image 相关的命令:")])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 image 文件从仓库抓取到本地")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image pull hello-world\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本机的所有 image 文件。")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n\nREPOSITORY          TAG            IMAGE ID            CREATED             SIZE\nnginx               latest         ae513a47849c        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" weeks ago         109MB\nhello-world         latest         e38bc07ac18e        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" weeks ago         "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".85kB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除 image 文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("imageName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("在 MacOS 下，Docker images 保存在哪个路径下？")])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Users"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("YourUserName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Library"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Containers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docker"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("driver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amd64"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("linux"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("qcow2\n")])])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本机正在运行的容器，使用 docker container ls 或 docker ps")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\nb15f63d6e87a        nginx               "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx -g \'daemon of…"')]),t._v("   About an hour ago   Up About an hour    "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:80-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp   webserver\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出本机所有容器，包括终止运行的容器，加上 --all 获取 -a")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止本机正在运行的容器")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container stop webserver\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以删除某个容器")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" container_name/container_id\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动某个容器")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" start container_name/container_id\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 终止某个容器")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop container_name/container_id\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在容器中执行 /bin/bash，执行该命令之后将可以以交互命令行的方式操作容器，另外 /bin/bash 可以替换成任意可执行命令")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" contaner_name /bin/bash\n")])])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OPTIONS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" IMAGE "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COMMAND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ARG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" webserver nginx\n")])])])},function(){var t=this._self._c;return t("p",[this._v("在 Web 浏览器中，转到 "),t("code",[this._v("http://localhost/")]),this._v(" 查看 nginx 主页。因为我们指定了默认的 HTTP 端口，所以不需要在 URL 的末尾追加"),t("code",[this._v(":80")]),this._v("。")])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(139),alt:""}})])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("-d 参数表示后台守护进程运行容器")]),this._v(" "),t("li",[this._v("--name 参数表示容器的名称，可随意取")]),this._v(" "),t("li",[this._v("-v 表示主机和容器共享文件的映射，容器的目录就是 Dockerfile 中用 VOLUME 命令定义的目录")]),this._v(" "),t("li",[this._v("-p 表器主机和容器端口映射，容器的端口就是 Dockerfile 中用 EXPOSE 命令绑定的端口")])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("FROM image_name\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("RUN <command>\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("ADD /path/to/sourcefile/in/host /path/to/targetfile/in/container\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('CMD ["executable","param1","param2"]\n')])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("EXPOSE <port>\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("WORKDIR /path/to/workdir/in/container\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('VOLUME ["/data"]\n')])])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run hello-world\nUnable to "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" image "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello-world:latest'")]),t._v(" locally\nlatest: Pulling from library/hello-world\nca4f61b1923c: Pull complete\nDigest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7\nStatus: Downloaded newer image "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" hello-world:latest\n\nHello from Docker"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nThis message shows that your installation appears to be working correctly.\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])},function(){var t=this._self._c;return t("blockquote",[t("p",[this._v("TensorFlow™ 是一个使用数据流图进行数值计算的开放源代码软件库。图中的节点代表数学运算，而图中的边则代表在这些节点之间传递的多维数组（张量）。借助这种灵活的架构，您可以通过一个 API 将计算工作部署到桌面设备、服务器或移动设备中的一个或多个 CPU 或 GPU。TensorFlow 最初是由 Google Brain 团队（隶属于 Google 机器智能研究部门）中的研究人员和工程师开发的，旨在用于进行机器学习和深度神经网络研究。但该系统具有很好的通用性，还可以应用于众多其他领域。")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(140),alt:""}})])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[this._v("docker")]),this._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-it")]),this._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-p")]),this._v(" hostPort:containerPort TensorFlowImage\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("“-p hostPort:containerPort”为可选项。如果您想从 shell 运行 TensorFlow 程序，请省略此选项。如果您想从 Jupyter Notebook 运行 TensorFlow 程序，请将“hostPort”和“containerPort”设置为 8888。 如果您想在容器内部运行 TensorBoard，请再添加一个 -p 标志，并将“hostPort”和“containerPort”设置为 6006。")]),this._v(" "),t("li",[this._v("“TensorFlowImage”是必填项。它指示 Docker 容器。 您必须指定下列某一个值：\n"),t("ul",[t("li",[this._v("gcr.io/tensorflow/tensorflow：TensorFlow 二进制映像。")]),this._v(" "),t("li",[this._v("gcr.io/tensorflow/tensorflow:latest-devel：TensorFlow 二进制映像以及源代码。")])])])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[this._v("docker")]),this._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[this._v("-it")]),this._v(" gcr.io/tensorflow/tensorflow "),t("span",{pre:!0,attrs:{class:"token function"}},[this._v("bash")]),this._v("\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("$ python\n")])])])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Python")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" tensorflow "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" tf\nhello "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constant"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, TensorFlow!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this._self._c;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("Hello, TensorFlow!\n")])])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(141),alt:""}})])},function(){var t=this,e=t._self._c;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v(":8888 gcr.io/tensorflow/tensorflow\n")])])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(142),alt:""}})])}],a=r(1),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"基于-docker-搭建-tensorflow-开发环境"}},[t._v("基于 Docker 搭建 TensorFlow 开发环境")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[t._v("前言")]),t._v(" "),e("p",[t._v("第一次听到 Docker 这个词，是两年前找实习工作的时候，参与了 "),e("a",{attrs:{href:"http://www.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DaoCloud"),e("OutboundLink")],1),t._v(" 的前端电话面试，了解到这家专注于做容器技术的公司，当时对于容器这些完全没有概念，只是觉得 Docker 是一个很高大上的技术，后来选择了自己相对擅长的移动开发，去了 "),e("a",{attrs:{href:"http://dcloud.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DCloud"),e("OutboundLink")],1),t._v("。转眼间已经过了两年，现在人工智能和云计算已经不仅仅是风口，而是很多技术实现的基础设施。\b\b")]),t._v(" "),e("p",[t._v('\b 今年打算学习一下人工智能领域一些最最基础的内容，\b 不至于几年后被市场淘汰吧。这段时间先学习一下谷歌的 TensorFlow 框架，正所谓"工欲善其事，必先利其器"，第一步先必须搭建好开发环境，TensorFlow 目前可支持如下几种方式安装：')]),t._v(" "),t._m(0),t._v(" "),e("p",[t._v("因为后续可能也会深入玩一下 Docker，所以对于 TensorFlow 的安装选用 Docker 的方式安装。")]),t._v(" "),e("h2",{attrs:{id:"docker-入门指南"}},[t._v("\bDocker \b 入门指南")]),t._v(" "),e("h3",{attrs:{id:"docker-是什么？"}},[t._v("Docker 是什么？")]),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("Docker 通过 Docker Engine 运行在操作系统 OS 上，虚拟机运行在硬件资源上。")]),t._v(" "),e("p",[t._v("通俗的讲 Docker 是一个“码头工人”，将我们需要的货物（应用）打包成具有某种标准规格的集装箱（镜像）内。docker 在部署过程中，将安装，配置等重复的部分自动化完成。只需要在第一次部署时，构建完可用的 docker 镜像（装好集装箱），在以后使用中，短短的几行命令就可以直接拉取镜像，根据这个镜像创建出一个容器，把服务跑起来了。所需要的仅仅是安装了 docker 的服务器，一个 Dockerfile 文件（装箱清单），以及比较流畅的网络而已，真可谓『一次构建，到处部署』")]),t._v(" "),e("p",[t._v("Docker 的主要用途，目前有三大类。")]),t._v(" "),t._m(2),t._v(" "),e("h3",{attrs:{id:"docker-总架构图"}},[t._v("Docker 总架构图")]),t._v(" "),t._m(3),t._v(" "),e("p",[t._v("docker 系统使用了 C/S 的架构，docker client 通过 REST API 请求 docker daemon 来管理 docker 的镜像和容器等。Server 端驻守在后台，称之为 docker daemon。Client 端是一个 CLI 程序，可以在命令行中通过 docker 这个二进制文件进行交互。")]),t._v(" "),e("h3",{attrs:{id:"安装-docker"}},[t._v("安装 Docker")]),t._v(" "),e("p",[t._v("Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。")]),t._v(" "),t._m(4),t._v(" "),e("ul",[e("li",[t._v("官方文档："),e("a",{attrs:{href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("MAC 环境下 Docker CE 的安装: "),e("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/docker-for-mac/install/"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("安装完成后，运行下面的命令，验证是否安装成功。")]),t._v(" "),t._m(5),e("h3",{attrs:{id:"docker-registry"}},[t._v("Docker Registry")]),t._v(" "),e("p",[t._v("Docker 远程镜像仓库：")]),t._v(" "),e("ul",[e("li",[t._v("DockerHub："),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("DaoCloud："),e("a",{attrs:{href:"https://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.daocloud.io/"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Aliyun："),e("a",{attrs:{href:"https://dev.aliyun.com/search.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://dev.aliyun.com/search.html"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("在安装环境的过程中，因为某个伟大的防火墙工程，我们需要的大部分资源都没法顺利的获取到，解决办法就是将下载的源换成国内某些厂商提供的镜像源。")]),t._v(" "),e("h3",{attrs:{id:"docker-image"}},[t._v("Docker Image")]),t._v(" "),t._m(6),t._v(" "),e("p",[t._v("只有通过这个文件，才能生成 Docker Container(容器)，Docker 根据 image 文件生成容器的实例，同一个 image 文件，可以生成多个同时运行的容器实例。实际场景下，一般我们自己创建的镜像都会依赖于某个 Linux 操作系统的镜像，例如 ubuntu，大多数情况下，我们可称其为基础镜像，但是我们也可以查看 ubuntu 镜像的 Dockerfile 会发现，它也是依赖于一个叫 scratch 的镜像，scratch 是 docker 的一个空镜像，里面只有 docker 加入的一些元数据，如果我们想要追求自己的镜像尽可能的轻量，也可以将 scratch 镜像作为我们的基础镜像来构建。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),e("p",[t._v("如果你使用的是 Docker for Mac 版本，那么所有的 docker images 保存在下面这个文件里。")]),t._v(" "),t._m(10),e("h3",{attrs:{id:"docker-container"}},[t._v("Docker Container")]),t._v(" "),e("p",[t._v("Docker Container(容器) 中包含了我们的应用代码和代码执行的环境，是用来打包分发代码的单元。image 文件生成的容器实例，本身也是一个文件，称为容器文件。")]),t._v(" "),t._m(11),e("p",[t._v("创建容器来执行应用代码，具体用到 run 命令：")]),t._v(" "),t._m(12),e("p",[t._v("例如，我们要创建一个运行 nginx 的容器，可以执行：")]),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),e("p",[t._v("参数的意义：")]),t._v(" "),t._m(16),t._v(" "),e("h3",{attrs:{id:"dockerfile"}},[t._v("Dockerfile")]),t._v(" "),e("p",[t._v("Dockerfile 是用来说明如何自动构建 docker image 的指令集文件，在 Dockerfile 中编写好指令集之后，我们就可以通过 docker build 命令构建镜像，Dockerfile 文件中命令的顺序就是构建过程中执行的顺序。")]),t._v(" "),e("p",[t._v("Dockerfile reference："),e("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/engine/reference/builder/"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("以下为几个常用的指令：")]),t._v(" "),e("p",[t._v("FROM：依赖镜像，所有 Dockerfile 都必须以 FROM 命令开始，表示其依赖的镜像。")]),t._v(" "),t._m(17),e("p",[t._v("RUN：在 shell 或者 exec 的环境下执行的命令")]),t._v(" "),t._m(18),e("p",[t._v("ADD：将主机文件复制到容器中")]),t._v(" "),t._m(19),e("p",[t._v("CMD：指定容器启动默认执行的命令")]),t._v(" "),t._m(20),e("p",[t._v("EXPOSE：指定容器在运行时监听的端口")]),t._v(" "),t._m(21),e("p",[t._v("WORKDIR：指定 RUN、CMD 与 ENTRYPOINT 命令的工作目录")]),t._v(" "),t._m(22),e("p",[t._v("VOLUME：授权访问从容器内到主机上的目录")]),t._v(" "),t._m(23),e("h3",{attrs:{id:"hello-world"}},[t._v("Hello World")]),t._v(" "),e("p",[t._v("我们这里也来跑一个 Hello World，打开命令行终端：")]),t._v(" "),t._m(24),e("p",[t._v("这里在命令行终端输出了"),e("code",[t._v("Hello from Docker!")]),t._v("，至此完成了我们的第一个 Docker 实例。这里我们是直接使用了 "),e("code",[t._v("docker run")]),t._v(" 来创建容器来执行应用代码，如果本地没有 hello-world 镜像文件，则会先从服务上拉取镜像文件。Docker 官方提供的 image 文件，都放在 "),e("a",{attrs:{href:"https://hub.docker.com/r/library/",target:"_blank",rel:"noopener noreferrer"}},[t._v("library"),e("OutboundLink")],1),t._v(" 组里面，所以它的是默认组。我们也可以先使用 "),e("code",[t._v("docker image pull hello-world")]),t._v(" 先下载镜像文件，然后再运行容器。这里我们也可以通过写 Dockerfile 文件完成上述功能。我们上述的 hello-world 镜像文件可以在这里查看："),e("a",{attrs:{href:"https://github.com/docker-library/hello-world",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/docker-library/hello-world"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"tensorflow-入门指南"}},[t._v("TensorFlow 入门指南")]),t._v(" "),e("h3",{attrs:{id:"tensorflow-简介"}},[t._v("TensorFlow 简介")]),t._v(" "),t._m(25),t._v(" "),e("h4",{attrs:{id:"学习资料"}},[t._v("学习资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.tensorflow.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TensorFlow 官网"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/tensorflow/tensorflow",target:"_blank",rel:"noopener noreferrer"}},[t._v("TensorFlow github"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.tensorfly.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TensorFlow 中文社区"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/tensorflow-zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TensorFlow 官方文档中文版-极客学院"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"什么是数据流图（data-flow-graph）"}},[t._v("什么是数据流图（Data Flow Graph）?")]),t._v(" "),t._m(26),t._v(" "),e("p",[t._v("数据流图用“结点”（nodes）和“线”(edges)的有向图来描述数学计算。“节点” 一般用来表示施加的数学操作，但也可以表示数据输入（feed in）的起点/输出（push out）的终点，或者是读取/写入持久变量（persistent variable）的终点。“线”表示“节点”之间的输入/输出关系。这些数据“线”可以输运“size 可动态调整”的多维数据数组，即“张量”（tensor）。张量从图中流过的直观图像是这个工具取名为“Tensorflow”的原因。一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。")]),t._v(" "),e("p",[t._v("TensorFlow 中的所有计算都会被转化为计算图上的节点。计算图中的每个节点可以有任意多个输入和任意多个输出，每个节点描述了一种运算操作（operation, op），节点可以算作运算操作的实例化（instance）。计算图描述了数据的计算流程，它也负责维护和更新状态，用户可以对计算图的分支进行条件控制或循环操作。用户可以使用 pyton、C++、Go、Java 等语言设计计算图。tensorflow 通过计算图将所有的运算操作全部运行在 python 外面，比如通过 c++运行在 cpu 或通过 cuda 运行在 gpu 上，所以实际上 python 只是一种接口，真正的核心计算过程还是在底层采用 c++或 cuda 在 cpu 或 gpu 上运行。")]),t._v(" "),e("p",[t._v("一个 TensorFlow图描述了计算的过程. 为了进行计算, 图必须在会话（session）里被启动. 会话将图的op分发到诸如CPU或GPU之的备上, 同时提供执行op的方法. 这些方法执行后, 将产生的tensor返回. 在Python语言中, 返回的tensor是numpy ndarray对象; 在C和C++语言中, 返回的tensor是tensorflow::Tensor实例。")]),t._v(" "),e("p",[t._v("从上面的描述中我们可以看到，tensorflow的几个比较重要的概念：tensor, computation graphy, node, session。正如前面所说，整个操作就好像数据（tensor）在计算图（computation graphy）中沿着边(edge)流过（flow）一个个节点（node），然后通过会话（session）启动计算。所以简单来说，要完成这整个过程，我们需要的东西是要定义数据、计算图和计算图上的节点，以及启动计算的会话。所以在实际使用中我们要做的大部分工作应该就是定义这些内容了。")]),t._v(" "),e("h3",{attrs:{id:"使用-docker-安装-tensorflow"}},[t._v("使用 Docker 安装 TensorFlow")]),t._v(" "),e("p",[t._v("上述我们已经说明了 Docker 的基本概念，阅读这步前确保你已经理解了创建一个容器的基本流程。本节的内容主要介绍启动一个包含了 TensorFlow 二进制映像的 Docker 容器。")]),t._v(" "),e("p",[t._v("要启动一个包含 TensorFlow 二进制映像的 Docker 容器，请输入以下格式的命令：")]),t._v(" "),t._m(27),e("p",[t._v("其中：")]),t._v(" "),t._m(28),t._v(" "),e("p",[t._v("gcr.io 是 Google Container Registry。dockerhub 上也提供了一些 TensorFlow 镜像。Docker 将在您第一次启动 TensorFlow 二进制映像时下载该镜像。")]),t._v(" "),e("p",[t._v("例如，以下命令会在一个 Docker 容器中启动一个 TensorFlow CPU 二进制映像，您可以通过该容器在 shell 中运行 TensorFlow 程序：")]),t._v(" "),t._m(29),e("p",[t._v("然后从 shell 中调用 Python，如下所示：")]),t._v(" "),t._m(30),e("p",[t._v("在 Python 交互式 shell 中输入以下几行简短的程序代码：")]),t._v(" "),t._m(31),e("p",[t._v("如果系统输出以下内容，则说明您可以开始编写 TensorFlow 程序了：")]),t._v(" "),t._m(32),e("p",[t._v("实际效果图如下：")]),t._v(" "),t._m(33),t._v(" "),e("p",[t._v("以下命令也可在 Docker 容器中启动一个 TensorFlow CPU 二进制映像。但是，在这个 Docker 容器里，您可以在 Jupyter Notebook 中运行 TensorFlow 程序：")]),t._v(" "),t._m(34),e("p",[t._v("这里我通过浏览器在 Jupyter Notebook 中正常运行了上面的代码。")]),t._v(" "),e("p",[t._v("实际效果图如下：")]),t._v(" "),t._m(35),t._v(" "),e("h2",{attrs:{id:"参考"}},[t._v("参考")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 入门教程"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000006449675",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 实践系列文章"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.tensorflow.org/install/install_mac#installing_with_docker",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 macOS 上安装 TensorFlow"),e("OutboundLink")],1)])]),t._v(" "),e("site-footer")],1)}),s,!1,null,null,null);e.default=n.exports}}]);