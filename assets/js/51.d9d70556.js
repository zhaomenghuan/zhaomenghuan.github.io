(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{293:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"android-加密算法研究之-aes-算法"}},[t._v("Android 加密算法研究之 AES 算法")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[t._v("前言")]),t._v(" "),a("p",[t._v("这段时间主要在做 EMM Node 服务相关的开发和设计，Android 开发放了一段时间，之前的安全键盘搁置了一段时间，今天组内一个同学在做这块的内容，对于 AES 加密算法这部分有些问题，字符串和文件加解密这也是后一段时间内容安全管理（MCM）的一部分，先花点时间研究一下 Android 里面几种常用的加密算法始末，这样后续也算有些储备。")]),t._v(" "),a("h2",{attrs:{id:"android-sdk-加密概述"}},[t._v("Android SDK 加密概述")]),t._v(" "),a("p",[t._v("密码学的三大作用：加密（ Encryption）、认证（Authentication），鉴定（Identification）")]),t._v(" "),t._m(0),t._v(" "),a("p",[t._v("明文、密文、密钥、对称加密算法、非对称加密算法，这些基本概念和加密算法原理就不展开叙述了。")]),t._v(" "),a("h3",{attrs:{id:"android-加密相关-api-结构"}},[t._v("Android 加密相关 API 结构")]),t._v(" "),a("p",[t._v("Android SDK 使用的 API 和 JAVA 提供的基本相似，由 Java Cryptography Architecture (JCA，java 加密体系结构) ，Java Cryptography Extension (JCE，Java 加密扩展包) ，Java Secure Sockets Extension(JSSE，Java 安全套接字扩展包)，Java Authentication and Authentication Service(JAAS，Java 鉴别与安全服务)组成。")]),t._v(" "),a("p",[t._v("JCA 提供基本的加密框架，如证书、数字签名、消息摘要和密钥对产生器，对应的 Android API 中的以下几个包：")]),t._v(" "),t._m(1),a("p",[t._v("JCE 扩展了 JCA，提供了各种加密算法、摘要算法、密钥管理等功能，对应的 Android API 中的以下几个包：")]),t._v(" "),t._m(2),a("p",[t._v("JSSE 提供了 SSL（基于安全套接层）的加密功能，使用 HTTPS 加密传输使用，对应的 Android API 主要是 java.net.ssl 包中。")]),t._v(" "),a("p",[t._v("JAAS 提供了在 Java 平台上进行用户身份鉴别的功能。对应的 Android API 主要在以下几个包：")]),t._v(" "),t._m(3),a("p",[t._v("它们其实只是一组接口，实际的算法是可由不同的 Provider 提供，Android API 默认的 Provider 主要是是 Bouncy Castle 和 OpenSSL。此外 Android API 还提供了 android.security 和 android.security.keystore（API 23 新增）来管理 keychain 和 keystore。")]),t._v(" "),a("h3",{attrs:{id:"base64-编码算法"}},[t._v("Base64 编码算法")]),t._v(" "),t._m(4),a("p",[t._v("Base64 只是一种编码方式，并不是一种加密算法，不要使用 base64 来加密数据。")]),t._v(" "),a("h3",{attrs:{id:"随机数生成器"}},[t._v("随机数生成器")]),t._v(" "),t._m(5),a("h2",{attrs:{id:"hash-算法"}},[t._v("Hash 算法")]),t._v(" "),a("h3",{attrs:{id:"hash算法有什么特点？"}},[t._v("Hash算法有什么特点？")]),t._v(" "),a("p",[t._v("一个优秀的 hash 算法，将能实现：")]),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("但在不同的使用场景中，如数据结构和安全领域里，其中对某一些特点会有所侧重。")]),t._v(" "),a("h3",{attrs:{id:"hash有哪些流行的算法？"}},[t._v("Hash有哪些流行的算法？")]),t._v(" "),a("p",[t._v("目前流行的 Hash 算法包括 MD5、SHA-1 和 SHA-2。")]),t._v(" "),t._m(7),t._v(" "),a("p",[t._v('可以看出，上面这几种流行的算法，它们最重要的一点区别就是"强抗碰撞性"。')]),t._v(" "),a("h2",{attrs:{id:"aes-算法"}},[t._v("AES 算法")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[t._v("参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000004669570",target:"_blank",rel:"noopener noreferrer"}},[t._v("Android 应用安全开发之浅谈加密算法的坑"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/bf1d7eee28d0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hash算法总结"),a("OutboundLink")],1)])]),t._v(" "),a("site-footer")],1)}),[function(){var t=this._self._c;return t("ul",[t("li",[this._v("加密：防止坏人获取你的数据。")]),this._v(" "),t("li",[this._v("认证：防止坏人修改了你的数据而你却并没有发现。")]),this._v(" "),t("li",[this._v("鉴权：防止坏人假冒你的身份。")])])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security\njava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("acl\njava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cert\njava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interfaces\njava"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spec\n")])])])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("javax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("crypto\njavax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interfaces\njavax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("spec\n")])])])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("javax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth\njavax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("login\njavax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callback\njavax"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x500\n")])])])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" encodeResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeToString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encodeResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果：aGVsbG8gd29ybGQ=")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" decodeResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encodeResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Base64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decodeResult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果：hello world")]),t._v("\n")])])])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecureRandom")]),t._v(" sr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecureRandom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("正向快速：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。")]),this._v(" "),t("li",[this._v("逆向困难：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。")]),this._v(" "),t("li",[this._v("输入敏感：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。")]),this._v(" "),t("li",[this._v("冲突避免：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难。")])])},function(){var t=this._self._c;return t("ul",[t("li",[t("p",[this._v("MD4（RFC 1320）是 MIT 的 Ronald L. Rivest 在 1990 年设计的，MD 是 Message Digest 的缩写。其输出为 128 位。MD4 已证明不够安全。")])]),this._v(" "),t("li",[t("p",[this._v('MD5（RFC 1321）是 Rivest 于1991年对 MD4 的改进版本。它对输入仍以 512 位分组，其输出是 128 位。MD5 比 MD4 复杂，并且计算速度要慢一点，更安全一些。MD5 已被证明不具备"强抗碰撞性"。')])]),this._v(" "),t("li",[t("p",[this._v('SHA （Secure Hash Algorithm）是一个 Hash 函数族，由 NIST（National Institute of Standards and Technology）于 1993 年发布第一个算法。目前知名的 SHA-1 在 1995 年面世，它的输出为长度 160 位的 hash 值，因此抗穷举性更好。SHA-1 设计时基于和 MD4 相同原理，并且模仿了该算法。SHA-1 已被证明不具"强抗碰撞性"。为了提高安全性，NIST 还设计出了 SHA-224、SHA-256、SHA-384，和 SHA-512 算法（统称为 SHA-2），跟 SHA-1 算法原理类似。SHA-3 相关算法也已被提出。')])])])}],!1,null,null,null);a.default=e.exports}}]);