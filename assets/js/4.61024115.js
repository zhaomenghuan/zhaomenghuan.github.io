(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{176:function(t,s,r){t.exports=r.p+"assets/img/platformio.d457bbef.png"},177:function(t,s,r){t.exports=r.p+"assets/img/nodemcu.36d9bca0.png"},178:function(t,s,r){t.exports=r.p+"assets/img/esp8266.2b44abf0.png"},179:function(t,s,r){t.exports=r.p+"assets/img/pio-vscode.f793c78e.png"},180:function(t,s,r){t.exports=r.p+"assets/img/usb-to-uart.fae6581c.png"},181:function(t,s,r){t.exports=r.p+"assets/img/new-project.29ef25f8.png"},182:function(t,s,r){t.exports=r.p+"assets/img/framework-example.97719794.png"},183:function(t,s,r){t.exports=r.p+"assets/img/platform-example.f85d78fc.png"},184:function(t,s,r){t.exports=r.p+"assets/img/dev-ls.fecfcdc7.png"},185:function(t,s,r){t.exports=r.p+"assets/img/pio-cli.c9d96905.png"},186:function(t,s,r){t.exports=r.p+"assets/img/pio-build.7291d233.png"},187:function(t,s,r){t.exports=r.p+"assets/img/pio-upload.0cace878.png"},188:function(t,s,r){t.exports=r.p+"assets/img/pio-monitor.e9a347c3.png"},189:function(t,s,r){t.exports=r.p+"assets/img/NodeMCU-Station.eef9f475.png"},190:function(t,s,r){t.exports=r.p+"assets/img/NodeMCU-Access-Point.cdc5a882.png"},191:function(t,s,r){t.exports=r.p+"assets/img/wifi-set-opmode.40df97c3.png"},192:function(t,s,r){t.exports=r.p+"assets/img/wifi-set-event-handler-cb.a9aca9f6.png"},193:function(t,s,r){t.exports=r.p+"assets/img/wifi-station-set-config.597b9e57.png"},194:function(t,s,r){t.exports=r.p+"assets/img/wifi-station-dhcpc-status.3a4033d9.png"},195:function(t,s,r){t.exports=r.p+"assets/img/wifi-station-connect.f27af3f9.png"},196:function(t,s,r){t.exports=r.p+"assets/img/wifi-station-get-connect-status.f33c7d80.png"},197:function(t,s,r){t.exports=r.p+"assets/img/os-timer-arm.f7786e8f.png"},198:function(t,s,r){t.exports=r.p+"assets/img/os-timer-disarm.942ebf7f.png"},199:function(t,s,r){t.exports=r.p+"assets/img/os-timer-setfn.baa220aa.png"},334:function(t,s,r){"use strict";r.r(s);var n=[function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(176),alt:"PlatformIO 简介"}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(177),alt:"NodeMCU"}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(178),alt:"ESP8266"}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(179),alt:"VS Code 插件"}})])},function(){var t=this._self._c;return t("p",[this._v("下载完成后可以在 "),t("strong",[this._v("关于本机 / 系统报告")]),this._v(" 中查看：")])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(180),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(181),alt:""}})])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("├── "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pio            # 存放工程编译产生的文件\n\t└── build\n\t\t├── nodemcuv2\n\t\t└── project"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("checksum\n├── "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vscode         # 存放针对工程定制化的 vscode 配置文件\n\t├── c_cpp_properties"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n\t├── extensions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n\t└── launch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n├── include         # 存放统一管理的 h 头文件\n├── lib             # 存放自己编写的库文件\n├── src             # 存放工程项目的 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" 源文件\n├── test            # 存放工程项目的测试文件\n└── platformio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ini  # 项目的核心配置文件，需要了解用到的配置项\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("framework-esp8266-rtos-sdk：RTOS SDK 框架文件，位于 ~/.platformio/packages/framework-esp8266-rtos-sdk 目录")]),this._v(" "),t("li",[this._v("toolchain-xtensa：交叉编译工具链，位于 ~/.platformio/packages/toolchain-xtensa@1.40802.0")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("├── appstate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n├── homestate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json\n├── packages        # 平台依赖的包\n\t├── framework"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("esp8266"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rtos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sdk\n\t├── tool"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("esptool\n\t├── tool"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("esptoolpy\n\t├── tool"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("mklittlefs\n\t├── toolchain"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("xtensa\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n├── penv             # Python版本管理工具\n├── platforms        # 本地缓存的平台文件\n\t├── espressif8266\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n└── python3          # Python3 环境\n")])])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(182),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(183),alt:""}})])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nodemcuv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nplatform "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" espressif8266\nboard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodemcuv2\nframework "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" esp8266"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rtos"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sdk\nmonitor_speed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("74880")]),t._v("\nmonitor_port "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dev"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SLAB_USBtoUART\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("monitor_speed：监视器波特率设置为 74880")]),this._v(" "),t("li",[this._v("monitor_port：监视器端口设置，设置为连接的串口端口")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("#include "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uart.h"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("user_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UART_ConfigTypeDef  uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baud_rate               "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BIT_RATE_115200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data_bits               "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   UART_WordLength_8b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parity                  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   USART_Parity_None"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop_bits               "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   USART_StopBits_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flow_ctrl               "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   USART_HardwareFlowControl_None"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UART_RxFlowThresh       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UART_InverseMask        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   UART_None_Inverse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UART_ParamConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UART0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("uart_config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("1.通用方法")])])},function(){var t=this._self._c;return t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[this._v("ls "),t("span",{pre:!0,attrs:{class:"token operator"}},[this._v("/")]),this._v("dev"),t("span",{pre:!0,attrs:{class:"token operator"}},[this._v("/")]),this._v("cu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[this._v("*")]),this._v("\n")])])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(184),alt:""}})])},function(){var t=this._self._c;return t("p",[t("strong",[this._v("2.使用 pio device list 命令")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(185),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(186),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(187),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(188),alt:""}})])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("Station 模式")]),this._v("：工作在 Station 模式下的 ESP8266 就像是一个接收机一样，它可以接收来自无线路由器发出的信号。ESP8266 模块通过路由器连接互联网，手机或电脑通过互联网实现对设备的远程控制。")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(189),alt:""}})])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("SoftAP 模式")]),this._v("：无线接入点的简称，ESP8266 模块作为热点，实现手机或电脑直接与模块通信，实现局域网无线控制。")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(190),alt:""}})])},function(){var t=this._self._c;return t("ul",[t("li",[t("strong",[this._v("Station + SoftAP 模式")]),this._v("：两种模式共存，既可以通过路由器连接到互联网，也可以作为 WiFi 热点，使其他设备连接到模块，实现广域网与局域网的无缝切换。"),t("br")])])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(191),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(192),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(193),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(194),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(195),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(196),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(197),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(198),alt:""}})])},function(){var t=this._self._c;return t("p",[t("img",{attrs:{src:r(199),alt:""}})])},function(){var t=this,s=t._self._c;return s("ol",[s("li",[t._v("初始化 station 建立连接和断开连接的回调函数")]),t._v(" "),s("li",[t._v("设置 ESP8266 的工作模式为 Station 模式")]),t._v(" "),s("li",[t._v("设置 WiFi 的 SSID 和 密码")]),t._v(" "),s("li",[t._v("开始连接 WiFi")]),t._v(" "),s("li",[t._v("监听 station 连接，检查 WiFi 连接状态")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/******************************************************************************\n * FunctionName : user_init\n * Description  : entry of user application, init user function here\n * Parameters   : none\n * Returns      : none\n*******************************************************************************/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("user_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印 ESP8266 RTOS SDK 版本")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SDK version:%s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("system_get_sdk_version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 station 连接")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_on_station_connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("on_wifi_connect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 station 断开连接")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_on_station_disconnect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("on_wifi_disconnect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 WiFi 模块 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_esp_wifi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止 WiFi AP 模式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop_wifi_ap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动 WiFi station 模式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start_wifi_station")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SSID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PASSWORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this._self._c;return t("ol",[t("li",[this._v("使用 &= ~ 位运算关闭 SoftAP 模式，使用 |= 位运算开启 Station 模式")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭 SOFTAP_MODE")]),t._v("\nWIFI_MODE mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wifi_get_opmode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("SOFTAP_MODE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wifi_set_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to disable AP mode!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启 STATION_MODE")]),t._v("\nWIFI_MODE mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wifi_get_opmode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" STATION_MODE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tmode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" STATION_MODE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wifi_set_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to enable Station mode!\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this._self._c;return t("ol",{attrs:{start:"2"}},[t("li",[this._v("使用软件定时器检查 WiFi 连接状态")])])},function(){var t=this,s=t._self._c;return s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("LOCAL "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" ICACHE_FLASH_ATTR "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait_for_connection_ready")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint8 flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_disarm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wifi_station_connected")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connected\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"reconnect after 2s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_setfn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("os_timer_func_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("wait_for_connection_ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_arm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nLOCAL "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" ICACHE_FLASH_ATTR "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_wifi_connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取消定时器定时")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_disarm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置定时器回调函数，使⽤定时器，必须设置回调函数。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_setfn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("os_timer_func_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("wait_for_connection_ready"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使能毫秒级定时器")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_timer_arm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this._self._c;return t("ul",[t("li",[this._v("对于同⼀个 timer，os_timer_arm 或 os_timer_arm_us 不能重复调⽤，必须先 os_timer_disarm；")]),this._v(" "),t("li",[this._v("os_timer_setfn 必须在 timer 未使能的情况下调⽤，在 os_timer_arm 或 os_timer_arm_us 之前或者 os_timer_disarm 之后。")])])}],a=r(1),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"基于-platformio-平台玩转-nodemcu-入门篇"}},[t._v("基于 PlatformIO 平台玩转 NodeMCU 入门篇")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[t._v("前言")]),t._v(" "),s("p",[t._v("近期关注到《物联网开发实战》课程，买了一套极客商城的开发套件，打算把自己业余时间学习过程中的一些收获记录一下。之前学习 Gokit3 开发板的过程中是在 Windows 系统上从零开始搭建编译环境的，整体的开发体验上感觉还是比较麻烦琐碎，不过对 Flash 下载固件有了一些基本认知，这次打算在 MacOS 平台基于 PlatformIO IDE 进行尝试。")]),t._v(" "),s("h2",{attrs:{id:"platformio-简介"}},[t._v("PlatformIO 简介")]),t._v(" "),t._m(0),t._v(" "),s("p",[t._v("PlatformIO 是专业的嵌入式开发协作平台，支持 924 个的嵌入式设备，41 个的开发平台，23 个的框架。Arduino, ARM mbed, Espressif (ESP8266/ESP32), RISC-V, STM32, FPGA, FreeRTOS 等都在 PlatformIO 的支持范围内。PlatformIO 在 Atom, Subliem Text, Vim, VS Code, Eclipse 等开发工具上都有支持，而 VS Code 的 PlatformIO IDE 是其主力推荐的开发环境。智能的代码提示和 Linter，代码库管理，统一的代码调试体验，内置的 PlatformIO Terminal 等等强大的功能，使得不管你开发任何一个设备，都能得到相近的开发体验。")]),t._v(" "),s("p",[t._v("在使用 PlatformIO 之前我们先来了解一些基本概念。")]),t._v(" "),s("h3",{attrs:{id:"platform"}},[s("a",{attrs:{href:"https://platformio.org/platforms",target:"_blank",rel:"noopener noreferrer"}},[t._v("Platform"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("平台，指的是芯片平台，具体来说就是芯片公司推出的系列芯片的开发平台。PlatformIO 支持嵌入式和桌面两种类型的开发平台，提供对各平台预先构建的工具链，调试器，上传器和框架，支持在 Mac、Linux (+ARM) 和 Windows 上开发。")]),t._v(" "),s("p",[t._v("支持的嵌入式平台包括：")]),t._v(" "),s("ul",[s("li",[t._v("Atmel 公司："),s("a",{attrs:{href:"https://platformio.org/platforms/atmelavr",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atmel AVR"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/platforms/atmelsam",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atmel SAM"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/platforms/atmelmegaavr",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atmel megaAVR"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("乐鑫(Espressif)公司："),s("a",{attrs:{href:"https://platformio.org/platforms/espressif8266",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/platforms/espressif32",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP32"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("飞思卡尔(Freescale)公司："),s("a",{attrs:{href:"https://platformio.org/platforms/freescalekinetis",target:"_blank",rel:"noopener noreferrer"}},[t._v("Freescale Kinetis"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Intel 公司："),s("a",{attrs:{href:"https://platformio.org/platforms/intel_arc32",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intel ARC32"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/platforms/intel_mcs51",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intel MCS-51 (8051)"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("ST 公司："),s("a",{attrs:{href:"https://platformio.org/platforms/ststm32",target:"_blank",rel:"noopener noreferrer"}},[t._v("ST STM32"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/platforms/ststm8",target:"_blank",rel:"noopener noreferrer"}},[t._v("ST STM8"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("德州仪器(TI)公司："),s("a",{attrs:{href:"https://docs.platformio.org/en/latest/platforms/timsp430.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TI MSP430"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://docs.platformio.org/en/latest/platforms/titiva.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TI TIVA"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("GreenWaves公司："),s("a",{attrs:{href:"https://docs.platformio.org/en/latest/platforms/riscv_gap.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RISC-V GAP"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("...")])]),t._v(" "),s("p",[t._v("Atmel AVR 一般指的就是 Arduino 系列开发板使用的芯片。之前大学的时候基于 TI 的 MSP430 做过智能小车和电子设计大赛，现在关于嵌入式的基础认知就是那个时候建立的。很多人入门 IoT 都会选择 ESP8266 平台，本文实战也会以 ESP8266 平台为例说明。")]),t._v(" "),s("h3",{attrs:{id:"frameworks"}},[s("a",{attrs:{href:"https://platformio.org/frameworks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Frameworks"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("框架，指的是开发框架，通俗来讲就是 SDK，一般会由官方或第三方提供一个软件库。目前支持的框架包括：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/arduino",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arduino"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/cmsis",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMSIS"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/esp8266-nonos-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 Non-OS SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/esp8266-rtos-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 RTOS SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/espidf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Espressif IoT Development Framework"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/freertos",target:"_blank",rel:"noopener noreferrer"}},[t._v("FreeRTOS"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/freedom-e-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Freedom E SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/gd32vf103-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("GigaDevice GD32V SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/kendryte-freertos-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kendryte FreeRTOS SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/kendryte-standalone-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kendryte Standalone SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/mbed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mbed"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/nuclei-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nuclei SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/pulp-os",target:"_blank",rel:"noopener noreferrer"}},[t._v("PULP OS"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/pumbaa",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pumbaa"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/siwisdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("SIWI GSM Software Development Kit for MT6261 and MT2503 SoC"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/stm32cube",target:"_blank",rel:"noopener noreferrer"}},[t._v("STM32Cube"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/shakti-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shakti SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/simba",target:"_blank",rel:"noopener noreferrer"}},[t._v("Simba"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/spl",target:"_blank",rel:"noopener noreferrer"}},[t._v("Standard Peripheral Library"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/wd-riscv-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("WD-Firmware"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/wiringpi",target:"_blank",rel:"noopener noreferrer"}},[t._v("WiringPi"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/zephyr",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zephyr RTOS"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://platformio.org/frameworks/libopencm3",target:"_blank",rel:"noopener noreferrer"}},[t._v("libopencm3"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("因为 Arduino 极具影响力，所以很多芯片平台也都有了自己的 Arduino 框架，现在 Arduino 框架平台支持的平台有很多，比如 Atmel AVR、Atmel SAM、Espressif 32、Espressif 8266、Infineon XMC、Intel ARC32、Kendryte K210、Microchip PIC32、Nordic nRF51、Nordic nRF52、T STM32、ST STM8 、Teensy、TI MSP430 、TI TIVA。")]),t._v(" "),s("p",[t._v("反过来讲，一个平台有可能支持多个不同开发框架。例如 ESP8266 平台支持的框架有："),s("a",{attrs:{href:"https://platformio.org/frameworks/esp8266-nonos-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 Non-OS SDK"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/frameworks/esp8266-rtos-sdk",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 RTOS SDK"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/frameworks/arduino",target:"_blank",rel:"noopener noreferrer"}},[t._v("Arduino"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://platformio.org/frameworks/simba",target:"_blank",rel:"noopener noreferrer"}},[t._v("Simba"),s("OutboundLink")],1),t._v(" 等。ESP8266 官方的 SDK 按照是否基于操作系统可分为：Non-OS 和 RTOS 两种版本。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Non-OS SDK")]),t._v("：Non-OS SDK 是不基于操作系统的 SDK，提供 IOT_Demo 和 AT 的编译。\n"),s("ul",[s("li",[t._v("开源项目地址："),s("a",{attrs:{href:"https://github.com/espressif/ESP8266_NONOS_SDK",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/espressif/ESP8266_NONOS_SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("SDK API 文档："),s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_cn.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_cn.pdf"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("RTOS SDK")]),t._v("：RTOS SDK 基于 FreeRTOS。\n"),s("ul",[s("li",[t._v("开源项目地址： "),s("a",{attrs:{href:"https://github.com/espressif/ESP8266_RTOS_SDK",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/espressif/ESP8266_RTOS_SDK"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("SDK API 文档："),s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/20b-esp8266_rtos_sdk_api_reference.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.espressif.com/sites/default/files/documentation/20b-esp8266_rtos_sdk_api_reference.pdf"),s("OutboundLink")],1)])])])]),t._v(" "),s("p",[t._v("RTOS SDK 是 Non-OS 的新版本，新版 ESP8266_RTOS_SDK 可帮助客户避免对单一 SDK 的依赖，允许客户应用程序同时兼容多款乐鑫芯片，包括 ESP8266 系列、ESP32 系列以及未来发布的新产品。")]),t._v(" "),s("h3",{attrs:{id:"boards"}},[s("a",{attrs:{href:"https://platformio.org/boards",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boards"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("开发版，PlatformIO 支持绝大部分流行的开发板，比如 Arduino 的全系开发板、NodeMCU 的全系列开发板，STM32 的 Nucleo 和 Discovery 系列评估板。PlatformIO 针对支持的开发板都提供完整的项目生成脚本，新建项目的时候选择对应的开发板和框架即可完成工程初始化。")]),t._v(" "),s("p",[t._v("这里我们类比一下 Android 生态来总结一下上述的三个概念：Platform 类比于 Android 平台，Frameworks 类比 Android 系统上层的 SDK 及框架，Boards 类似于基于 Android 的移动设备，例如华为、小米等厂商的各系列手机、Pad 之类的设备。")]),t._v(" "),s("h2",{attrs:{id:"nodemcu-开发板"}},[t._v("NodeMCU 开发板")]),t._v(" "),s("p",[t._v("我手上拿到是下面这款安信可 NodeMCU ESP8266 的开发板，该开发板延续了 NodeMCU 1.0 的设计，搭建了 ESP8266 ESP-12D 模组及 CP2102 驱动。NodeMCU 极大的简化 ESP8266 刷写固件的接线方式，直接即插即用。详细参数可以参考 "),s("a",{attrs:{href:"https://docs.ai-thinker.com/_media/esp8266/docs/nodemcu8266_v1.2%E8%A7%84%E6%A0%BC%E4%B9%A6.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("NodeMCU-8266 规格书"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("乐鑫 ESP8266 芯片官网："),s("a",{attrs:{href:"https://www.espressif.com/zh-hans/products/socs/esp8266",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.espressif.com/zh-hans/products/socs/esp8266"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("ESP8266 是一款面向物联网应用的 WiFi MCU，具有以下特点：")]),t._v(" "),t._m(2),t._v(" "),s("h2",{attrs:{id:"环境准备"}},[t._v("环境准备")]),t._v(" "),s("p",[t._v("1.下载 VS Code IDE，然后在 VS Code  拓展市场安装 PlatformIO IDE 拓展。")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("2.CP2102 USB 转 UART 驱动："),s("a",{attrs:{href:"https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers"),s("OutboundLink")],1)]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("h2",{attrs:{id:"新建工程"}},[t._v("新建工程")]),t._v(" "),s("p",[t._v("这里我以 NodeMCU 1.0 开发板选择 ESP8266 RTOS SDK 框架为例加以说明。")]),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("选择好参数、设置好项目名称之后就可以点击 Finish 完成了，然后等待第一次自动配置环境。自动生成的工程目录结构如下：")]),t._v(" "),t._m(7),s("p",[t._v("c_cpp_properties.json 是 VS Code C/C++ 工程配置文件，c_cpp_properties.json 中定义了工程依赖的库及交叉编译工具 xtensa-lx106-elf-gcc 的路径。我们可以看到工程主要用到了两个包：")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("launch.json 是工程调试配置文件，具体文档可以参考："),s("a",{attrs:{href:"https://docs.platformio.org/en/latest/plus/debugging.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Debugging"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("我们看一下 ~/.platformio 的目录结构如下：")]),t._v(" "),t._m(9),s("p",[t._v("新建的项目是空白的项目，我们可以从 SDK 文件夹拷贝一份代码示例进行修改。我们可以 packages/framework-esp8266-rtos-sdk/examples 或 platforms/espressif8266/examples 中拷贝一份示例工程开始。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("下面我将以 wifi_station_machine_demo 为例说明。")]),t._v(" "),s("h2",{attrs:{id:"工程配置"}},[t._v("工程配置")]),t._v(" "),s("p",[t._v("我们从 wifi_station_machine_demo 中将 user/user_main.c 和 user/wifi_state_machine.c 拷贝到工程的 src 目录下，将 include/user_config.h 和 include/wifi_state_machine.h 拷贝到 include 目录下。修改 include/user_config.h 中的 SSID 和 PASSWORD，并修改 platformio.ini 配置文件。")]),t._v(" "),s("h3",{attrs:{id:"platformio-ini"}},[t._v("platformio.ini")]),t._v(" "),s("p",[t._v("platformio.ini 配置文件：")]),t._v(" "),t._m(12),s("p",[t._v("参数说明：")]),t._v(" "),t._m(13),t._v(" "),s("h3",{attrs:{id:"监视器波特率"}},[t._v("监视器波特率")]),t._v(" "),s("p",[t._v("ESP8266_RTOS_SDK 默认使用 UART0 打印调试信息，默认波特率为 74880。我们也可以使用下面的方法修改成 115200。")]),t._v(" "),t._m(14),s("h3",{attrs:{id:"查看串口端口"}},[t._v("查看串口端口")]),t._v(" "),s("p",[t._v("Mac OS 系统查看串口端口的两种方法。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),s("p",[t._v("串口 port 为 /dev/cu.SLAB_USBtoUART。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("打开 PlatformIO CLI，输入 pio device list 命令可以获取连接的串口信息。")]),t._v(" "),s("h2",{attrs:{id:"代码烧写"}},[t._v("代码烧写")]),t._v(" "),s("h3",{attrs:{id:"代码构建"}},[t._v("代码构建")]),t._v(" "),s("p",[t._v("我们修改完代码后，可以点击 Project Tasks 中的 Build 任务或点击状态栏的图标进行构建。构建的过程是编译代码，工程 .pio/build/nodemcuv2 目录下的文件就是编译生成的产物。")]),t._v(" "),t._m(20),t._v(" "),s("h3",{attrs:{id:"固件上传"}},[t._v("固件上传")]),t._v(" "),s("p",[t._v("上传的过程就是将编译产物(也称固件)上传到我们的开发板上。")]),t._v(" "),t._m(21),t._v(" "),s("h3",{attrs:{id:"串口监视器"}},[t._v("串口监视器")]),t._v(" "),s("p",[t._v("我们可以直接在 IDE 端打开串口调试器查看日志信息，不需要额外的串口调试工具即可查看日志还是比较方便的。注意需要按一下 RST 按键重启模组。")]),t._v(" "),t._m(22),t._v(" "),s("h2",{attrs:{id:"代码分析"}},[t._v("代码分析")]),t._v(" "),s("h3",{attrs:{id:"esp8266-工作模式"}},[t._v("ESP8266 工作模式")]),t._v(" "),s("p",[t._v("ESP8266 利用 WiFi 联网时有三种工作模式。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),s("h3",{attrs:{id:"wifi-接口核心函数"}},[t._v("WiFi 接口核心函数")]),t._v(" "),s("p",[t._v("RTOS SDK API 基本兼容 Non-OS SDK API，可以参考："),s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_cn.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 Non-OS SDK API 手册"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("示例采用固定 WiFi SSID 和密码的方式连接，主要用到的函数为：")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),s("h3",{attrs:{id:"软件定时器核心函数"}},[t._v("软件定时器核心函数")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),s("h3",{attrs:{id:"wifi-station-machine-demo-分析"}},[t._v("wifi_station_machine_demo 分析")]),t._v(" "),s("p",[t._v("ESP8266 物联网平台的所有网络功能均在库中实现，对用户来说是不透明。用户应用的初始化功能可以在 user_main.c 中实现。void user_init(void) 是上层程序的入口函数，给用户提供一个初始化接口，用户可在该函数内增加硬件初始化、网络参数设置、定时器器初始化等功能。 示例中 ESP8266 RTOS SDK 使用的版本是 1.5.0-beta.5，接下来我将分析一下示例代码的关键逻辑。")]),t._v(" "),s("p",[t._v("示例代码的整体逻辑为：")]),t._v(" "),t._m(37),t._v(" "),t._m(38),s("p",[t._v("我们可以看到 user_init 中代码逻辑非常简单清晰，除了 system_get_sdk_version 是 SDK 的 API，其他都是 wifi_state_machine.c 驱动中定义的方法。上面的代码开启了 ESP8266 的 Station 模式，从而可以通过路由连接互联网。")]),t._v(" "),s("p",[t._v("代码中有几处代码值得说一下：")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),s("p",[t._v("软件定时器由软件实现，定时器的函数在任务中被执⾏。因为任务可能被中断，或者被 其他⾼优先级的任务延迟，因此以下 os_timer 系列的接⼝并不能保证定时器精确执⾏。 如果需要精确的定时，例如，周期性操作某 GPIO，请使⽤硬件中断定时器，具体可参考 hw_timer.c，硬件定时器的执⾏函数在中断⾥被执⾏。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),t._m(43),t._v(" "),s("h2",{attrs:{id:"后记"}},[t._v("后记")]),t._v(" "),s("p",[t._v("本文行文至此，我们基于 PlatformIO 平台在 NodeMCU 运行了一个示例代码，对 ESP8266 三种工作模式有一个基本认识，基本掌握 Station 模式的使用流程，也初步掌握软件定时器的用法。后续会继续围绕 ESP8266，并结合具体的传感器完成实战的开发。")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[t._v("参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/2a-esp8266-sdk_getting_started_guide_cn.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 SDK 入门指南"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/esp8266-technical_reference_cn.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266 技术参考手册"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_cn.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESP8266EX 技术规格书"),s("OutboundLink")],1)])]),t._v(" "),s("site-footer")],1)}),n,!1,null,null,null);s.default=e.exports}}]);